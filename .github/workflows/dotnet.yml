name: Build and Release

on:
  push:
    branches: [master]
    tags: '**'
  pull_request:
    branches: [master]

jobs:
  build:
    name: Build generator and definitions
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Build
        run: |
          build () {
            dotnet publish -r $1 --no-restore --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=True -p:TrimMode=Link defgen/defgen.fsproj -o build/$1/
          }

          dotnet restore

          build linux-x64
          build win-x64
          build osx-x64

          mv build/linux-x64/defgen build/defgen-linux
          mv build/win-x64/defgen.exe build/defgen-win.exe
          mv build/osx-x64/defgen build/defgen-osx

          rm -rf build/*/*.pdb
          rm -rf build/linux-x64
          rm -rf build/win-x64
          rm -rf build/osx-x64

      - name: Generate defs
        run: |
          chmod +x build/defgen-linux
          cat defs.yml | build/defgen-linux > build/defs.d.ts

      - name: Publish artifacts
        uses: ncipollo/release-action@v1
        with:
          artifacts: 'build/*'
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          tag: build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sitereqs
          path: build

  publish:
    name: Publish the type definitions
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          registry-url: 'https://registry.npmjs.org'
      - uses: actions/download-artifact@v3
        with:
          name: sitereqs
          path: build

      - run: mv build/defs.d.ts npm_package
      - name: Publish package
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: npm_package
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-site:
    name: Build the TypeDoc site
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/')
    needs: build

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm i -g typescript typedoc

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: sitereqs
          path: build

      - name: Build the documentation
        run: |
          mv build/defs.d.ts npm_package
          cd npm_package
          npm i
          cd ..

          echo '{"compilerOptions":{"target":"esnext","moduleResolution":"node","allowSyntheticDefaultImports":true}}' > tsconfig.json

          typedoc npm_package/defs.d.ts

      - run: tar --directory docs -hcf artifact.tar .
      - uses: actions/upload-artifact@v3
        with:
          name: github-pages
          path: ./artifact.tar

  # Deploy the above artifact to GitHub pages.
  # This is a separate job so that only actions/deploy-pages has the necessary permissions.
  deploy:
    name: Deploy to Pages
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/')
    needs: build-site
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url  }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v1
