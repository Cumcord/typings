toplevel: '@cumcord'

imports:
  - nests
  - spitroast
  - react
  - react-dom

decls: |
  interface ModalOptions {
    header?: string
    confirmText?: string
    cancelText?: string
    content?: string
    type?: "neutral" | "danger" | "confirm"
  }
  
  interface ToastOptions {
    title: string
    content?: string
    onClick?: () => void
    className?: string
    duration?: number
  }
  
  interface CommandArg {
    name: string,
    description: string,
    type?: "string" | "bool" | "user" | "channel" | "role"
    required?: boolean
  }
  
  interface CommandOptions {
    name: string
    description: string
    args: CommandArg[]
    handler: (ctx: any, send: (m: string | Object) => void) => Promise<string | void> | string | void
  }
  
  type TreeSearchFilter = string | ((node: any) => boolean)
  
  interface TreeSearchOptions {
    walkable?: string[]
    ignore?: string[]
    limit?: number
  }
  
  interface BatchFindFilters {
    find:    (filter: (m: any) => boolean) => void
    findAll: (filter: (m: any) => boolean) => void
  
    findByDisplayName:    (name: string, defExp?: boolean) => void
    findByDisplayNameAll: (name: string, defExp?: boolean) => void
  
    findByKeywordAll:    (...keywords: string[]) => void
    findByProps:         (...props:    string[]) => void
    findByPropsAll:      (...props:    string[]) => void
    findByPrototypes:    (...protos:   string[]) => void
    findByPrototypesAll: (...protos:   string[]) => void
    findByStrings:       (...strs:     string[]) => void
    findByStringsAll:    (...strs:     string[]) => void
  }
  
  interface LoadedNestValue {
    // onLoad actually has a very complex type, but honestly thats such a corner case that its not worth it
    onLoad?: () => void
    onUnload: () => void
    settings?: react.ComponentType<any> | react.ElementType
  }
  
  interface InstalledNestValue {
    enabled: boolean
    js: string
    update: boolean
    manifest: Object // is it worth replicating the manifest format twice? probably not.
  }
  
  type InjectCssReturn = (newCSS?: string) => void | InjectCssReturn
  
  interface DomFindOptions {
    parent?: boolean
    displayName?: boolean
    blockList?: string[]
  }

defs:
- [function, 'uninject(): void']
- [function, 'cum(size?: number, strength?: number): string | Promise<string>']

- pluginData:
  - [const, 'id: string']
  - [const, 'persist: nests.Nest<any>']
  
  - manifest:
    - [const, 'name: string']
    - [const, 'description: string']
    - [const, 'author: string']
    - [const, 'license: undefined | string']
    - [const, 'media: undefined | string | string[]']
    - [const, 'url: undefined | string'] # origin hosting URL, added by mirroring repos

- dev:
  - [function, 'showSettings(): void']
  - [function, 'toggleDevMode(): void']
  - [const, 'isEnabled: boolean']
  - [const, 'storage: undefined | nests.Nest<any>']

- commands:
  - [function, 'addCommand(opts: CommandOptions): () => void']

- modules:
  - webpack:
    - [const, 'modules: Object']
    - [function, 'getModule(mod: any): any']
    - [function, 'find(filter: (m: any) => boolean): any']
    - [function, 'findAll(filter: (m: any) => boolean): any[]']
    - [function, 'findByProps(...props: string[]): any']
    - [function, 'findByPropsAll(...props: string[]): any[]']
    - [function, 'findByPrototypes(...protos: string[]): any']
    - [function, 'findByPrototypesAll(...protos: string[]): any[]']
    - [function, 'findByDisplayName(name: string, defaultExp?: boolean): any']
    - [function, 'findByDisplayNameAll(name: string, defaultExp?: boolean): any[]']
    - [function, 'findByStrings(...searches: string[]): any']
    - [function, 'findByStringsAll(...searches: string[]): any[]']
    - [function, 'findByKeywordAll(...keywords: string[]): any[]']
    - [function, 'findAsync(filter: () => any, legacy: false): [Promise<any>, () => void]']
    - [function, 'batchFind(callback: (filters: BatchFindFilters) => void): any[]']

  - common:
    - [const, 'constants: Object']
    - [const, 'channels: Object']
    - [const, 'Flux: Object']
    - [const, 'FluxDispatcher: Object']
    - [const, 'i18n: Object']
    - [const, 'React: typeof react']
    - [const, 'ReactDOM: typeof react_dom']
    - [const, 'Redux: Object']
    - [const, 'zustand: Function']
    - [const, 'highlightjs: Object']

    - uuid:
      - [function, 'v4(): string']

  - internal:
    - [const, 'nests: typeof nests']
    - idbKeyval:
      - [function, 'get<T>(path: string): Promise<T>']
      - [function, 'set<T>(path: string, value: T): Promise<void>']

- plugins:
  - [function, 'importPlugin(url: string): Promise<void>']
  - [function, 'removePlugin(id: string): void']
  - [function, 'togglePlugin(id: string): void']
  - [const, 'installed: nests.Nest<Record<string, InstalledNestValue>>']
  - [const, 'loaded: nests.Nest<Record<string, LoadedNestValue>>']

- patcher:
  - [const, 'before: typeof spitroast.before']
  - [const, 'after: typeof spitroast.after']
  - [const, 'instead: typeof spitroast.instead']
  - [function, 'injectCss(css: string): InjectCssReturn']
  - [function, 'findAndPatch<T>(modFind: () => T | undefined, patchCallback: (m: T) => () => void): () => void']

- utils:
  - [function, 'findInTree(tree: any[] | Object, filter: TreeSearchFilter, options: TreeSearchOptions): any']
  - [function, 'findInReactTree(tree: any[] | Object, filter: TreeSearchFilter): any']
  - [function, 'findByDomNode(node: HTMLElement, opts?: DomFindOptions): any']
  - [function, 'copyText(text: string): void']
  - [function, 'getOwnerInstance(elem: any): any']
  - [function, 'getReactInstance(elem: HTMLElement): any']
  - logger:
    - [function, 'log(...args: any[]): void']
    - [function, 'warn(...args: any[]): void']
    - [function, 'error(...args: any[]): void']

  - [function, 'sleep(time?: number): Promise<void>']
  - [function, 'useNest(nest: nests.Nest<any>): void']
  
- ui:
  - components:
    - [const, 'ErrorBoundary: react.ComponentType']
  - modals:
    - [function, 'showConfirmationModal(data: ModalOptions, callback?: (res: boolean) => void): Promise<boolean>']
  - toasts:
    - [function, 'showToast(data: ToastOptions): void']