{
  "uninject": ["function", "uninject(): void"],
  "cum": ["function", "cum(cockSize?: number, cumshotStrength?: number): string | Promise<string>"],
  "dev": [
    ["function", "showSettings(): void"],
    ["function", "toggleDevMode(): void"]
  ],
  "modules": {
    "webpack": [
      ["const", "modules: Object"],
      ["function", "find(filter: Function): undefined | Object | Function"],
      ["function", "findAll(filter: Function): Array<any | Function>"],
      [
        "function",
        "findByProps(...propNames: Array<String>): undefined | Object | Function"
      ],
      [
        "function",
        "findByPropsAll(...propNames: Array<String>): Array<any | Object | Function>"
      ],
      [
        "function",
        "findByPrototypes(...protoNames: Array<String>): Array<any | Object | Function>"
      ],
      ["function", "findByDisplayName(displayName: String): any"],
      [
        "function",
        "findByStrings(...searchStrings: Array<String>): undefined | Object | Function"
      ],
      [
        "function",
        "findByKeywordAll(...searchStrings: Array<String>): Array<any | Object | Function>"
      ]
    ],
    "common": {
      "constants": ["const", "constants: Object"],
      "channels": ["const", "channels: Object"],
      "Flux": ["const", "Flux: Object"],
      "FluxDispatcher": ["const", "FluxDispatcher: Object"],
      "i18n": ["const", "i18n: Object"],
      "React": ["const", "React: Object"],
      "ReactDOM": ["const", "ReactDOM: Object"],
      "Redux": ["const", "Redux: Object"],
      "zustand": ["const", "zustand: Function"],
      "highlightjs": ["const", "highlightjs: Object"],
      "uuid": [["function", "v4(): string"]]
    },
    "internal": {
      "idbKeyval": [
        ["function", "get(path: string): Promise<any>"],
        ["function", "set(path: string, value: any): Promise<void>"]
      ],
      "nests": [
        ["const", "Events: Record<string, string>"],
        ["function", "make(obj: any): Object"]
      ]
    }
  },
  "plugins": [
    ["function", "importPlugin(baseUrl: string): void"],
    ["function", "deletePlugin(pluginId: string): void"],
    ["function", "togglePlugin(pluginId: string): void"]
  ],
  "patcher": [
    [
      "function",
      "before(functionName: string, functionParent: Object | Function, callback: (arguments: Array<any | Object | Function>) => any): () => boolean"
    ],
    [
      "function",
      "after(functionName: string, functionParent: Object | Function, callback: (arguments: Array<any | Object | Function>, returnValue: any) => any): () => boolean"
    ],
    [
      "function",
      "instead(functionName: string, functionParent: Object | Function, callback: (arguments: Array<any | Object | Function>) => any): () => boolean"
    ],
    ["function", "injectCSS(newCss?: string): void"]
  ],
  "utils": {
    "findInTree": [
      "function",
      "findInTree(tree: Array<any> | Object, searchFilter: string | ((object: Array<any> | Object) => boolean), settings: { walkable?: Array<any>, ignore: Array<any>, limit?: number }): any"
    ],
    "findInReactTree": [
      "function",
      "findInReactTree(tree: Array<any> | Object, searchFilter: string | ((object: Array<any> | Object) => boolean)): any"
    ],
    "copyText": ["function", "copyText(text: string): void"],
    "getOwnerInstance": ["function", "getOwnerInstance(elem: any): any"],
    "getReactInstance": ["function", "getReactInstance(elem: any): Object"],
    "logger": [
      ["function", "log(...args: Array<any>): void"],
      ["function", "warn(...args: Array<any>): void"],
      ["function", "error(...args: Array<any>): void"]
    ],
    "useNest": ["function", "useNest(nest: Object): void"]
  },
  "ui": {
    "components": [],
    "modals": [
      [
        "function",
        "showConfirmationModal(data: {header?: string, confirmText?: string, cancelText?: string, content?: string, type: string}, callback: undefined | Function): Promise<boolean>"
      ]
    ],
    "toasts": [
      [
        "function",
        "showToast(data: {title: string, content: string, onClick?: Function, className?: string, duration?: number}): void"
      ]
    ]
  }
}
