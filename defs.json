{
  "uninject": ["function", "uninject(): void"],
  "cum": ["function", "cum(): void | Promise<void>"],
  "dev": [
    ["function", "showSettings(): void"],
    ["function", "toggleDevMode(): void"]
  ],
  "modules": {
    "webpack": [
      ["const", "modules: Object"],
      ["function", "find(filter: Function): undefined | Object | Function"],
      ["function", "findAll(filter: Function): Array<any | Function>"],
      [
        "function",
        "findByProps(...propNames: Array<String>): undefined | Object | Function"
      ],
      [
        "function",
        "findByPropsAll(...propNames: Array<String>): Array<any | Object | Function>"
      ],
      [
        "function",
        "findByPrototypes(...protoNames: Array<String>): Array<any | Object | Function>"
      ],
      ["function", "findByDisplayName(displayName: String): any"],
      [
        "function",
        "findByStrings(...searchStrings: Array<String>): undefined | Object | Function"
      ],
      [
        "function",
        "findByKeywordAll(...searchStrings: Array<String>): Array<any | Object | Function>"
      ]
    ],
    "common": [
      ["const", "constants: undefined | Object | Function"],
      ["const", "channels: undefined | Object | Function"],
      ["const", "Flux: undefined | Object | Function"],
      ["const", "FluxDispatcher: undefined | Object | Function"],
      ["const", "i18n: Array<any | Object | Function>"],
      ["const", "React: undefined | Object | Function"],
      ["const", "ReactDOM: undefined | Object | Function"],
      ["const", "Redux: undefined | Object | Function"],
      ["const", "zustand: undefined | Object | Function"]
    ]
  },
  "plugins": [
    ["function", "importPlugin(baseUrl: string): void"],
    ["function", "deletePlugin(pluginId: string): void"],
    ["function", "togglePlugin(pluginId: string): void"]
  ],
  "patcher": [
    ["function", "before(functionName: string, functionParent: Object | Function, callback: (arguments: Array<any | Object | Function>) => any): () => boolean"],
    ["function", "after(functionName: string, functionParent: Object | Function, callback: (arguments: Array<any | Object | Function>, returnValue: any) => any): () => boolean"],
    ["function", "instead(functionName: string, functionParent: Object | Function, callback: (arguments: Array<any | Object | Function>) => any): () => boolean"],
    ["function", "injectCSS(newCss?: string): void"]
  ],
  "utils": [
    ["function", "findInTree(tree: Array<any> | Object, searchFilter: string | (object: Array<any> | Object) => boolean, { walkable: Array<any> = null, ignore: Array<any>, limit: number = 100 } = {})"]
  ]
}
